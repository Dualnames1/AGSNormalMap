// new module script
// new module script
struct Frames
{
	int view;
	int loop;
	int frame;
	int graphic;
};

Frames framez[300000];


int frameid=0;
DynamicSprite*tempNormal;
int ViewAdress[2000];


int nID=0;//internalNormalMapid

int GetAddressOfView(int view)
{
  int i=0;
  int value=0;
  while (i < frameid)
  {
    if (framez[i].view==view)
    {
      value=i;
      i=frameid;
    }
    i++;
  }
  return value;
}

void SaveView(int view)
{
  int lp=0;
  
  while (lp < Game.GetLoopCountForView(view))
  {    
    int fp=0;
    while (fp < Game.GetFrameCountForLoop(view, lp))
    {
      ViewFrame*grabView=Game.GetViewFrame(view, lp, fp);
      framez[frameid].view=view;
      framez[frameid].loop=lp;
      framez[frameid].frame=fp;
      framez[frameid].graphic=grabView.Graphic;
      
      //READ VIEW AND SET NORMAL MAPS PER SPRITE.
      
      
      tempNormal=DynamicSprite.CreateFromExistingSprite(grabView.Graphic, true);
      DrawNormalMap(tempNormal.Graphic, 1.0,1.0);
      CreateNormalMap(tempNormal.Graphic, grabView.Graphic, nID, 12.0, 20.0);
      nID++;
      tempNormal.Delete();
      
      
      frameid++;
      fp++;
    }
    lp++;
  }
  ViewAdress[view]=GetAddressOfView(view);

}




int RestoreFrameGraphic(int view, int loop, int frame, int address)
{
  int i=address;
  int value=0;
  while (i < frameid)
  {
    if (framez[i].view==view && framez[i].loop==loop
    && framez[i].frame==frame)
    {
      value = framez[i].graphic;
      i=frameid;
    }
    i++;
  }
  return value;
}

DynamicSprite*DynSpr[20];

int DistToL (this Character*, int id)
{
  float difLX=IntToFloat(GetLightX(id)-this.x);
  float difLY=IntToFloat(GetLightY(id)-this.y);
  float diflights=Maths.Sqrt((difLX*difLX) + (difLY*difLY));
  return FloatToInt(diflights);
}




bool CharacterCloseToLight(this Character*,int id, int byradius)
{
  float difLX=IntToFloat(GetLightX(id)-this.x);
  float difLY=IntToFloat(GetLightY(id)-this.y);
  float diflights=Maths.Sqrt((difLX*difLX) + (difLY*difLY));
  
  //if (id==5)cEgo.SayBackground(String.Format("%f",diflights));
  if (diflights < IntToFloat(byradius))
  {
    return true;
  }
  else return false;
}

function CreateLightX(int id, int x, int y, int radius, bool state)
{
  float sc = IntToFloat(player.Scaling);
 
  int radi =FloatToInt(IntToFloat(radius)*100.0/sc, eRoundNearest);//5-200
  int lx=FloatToInt(IntToFloat((x-player.x))*(100.0/sc))+player.x;
  int ly=FloatToInt(IntToFloat((y-player.y))*(100.0/sc))+player.y;  
  
  
  
  if (player.CharacterCloseToLight(id, radius*2))
  {
    CreateLight(id,lx, ly, radi, true);
    //SetLightState(id, true);
    if (player.y>ly+GetLightRadius(id))  SetLightZ(id, -1);
    else SetLightZ(id, 0);
  }
  else 
  {
    CreateLight(id,lx, ly, radi, false);
   // CloseLight(id);
    //SetLightState(id, false);
  }
  
  
  
  
}

int ClampFrame(int frameval, int loop,  int view)
{
  if (frameval <0) frameval=0;
  if (frameval > Game.GetFrameCountForLoop(view, loop)-1)
  {
    frameval=Game.GetFrameCountForLoop(view, loop)-1;
  }
  return frameval;
}


function UpdateView(this Character*, int view)
{
  
   if (this.View==view)
   {
     int address=ViewAdress[view];
     if (this.Frame==0)
     {
       int dframe=Game.GetFrameCountForLoop(this.View, this.Loop)-2;
       int frame=ClampFrame(dframe, this.Loop, this.View);
       ViewFrame*restoreView=Game.GetViewFrame(this.View, this.Loop, frame);
       restoreView.Graphic=RestoreFrameGraphic(this.View, this.Loop, this.Frame, address);
       if (DynSpr[restoreView.Frame]!=null) DynSpr[restoreView.Frame].Delete(); 
     }
     else if (this.Frame==1)
     {
       int dframe=Game.GetFrameCountForLoop(this.View, this.Loop)-1;
       int frame=ClampFrame(dframe, this.Loop, this.View);
       ViewFrame*restoreView=Game.GetViewFrame(this.View, this.Loop, frame);
       restoreView.Graphic=RestoreFrameGraphic(this.View, this.Loop, this.Frame, address);
       if (DynSpr[restoreView.Frame]!=null) DynSpr[restoreView.Frame].Delete(); 
     }
     else
     {
       int frame=ClampFrame(this.Frame-2, this.Loop, this.View);
       ViewFrame*restoreView=Game.GetViewFrame(this.View, this.Loop, frame);
       restoreView.Graphic=RestoreFrameGraphic(this.View, this.Loop, this.Frame, address);
       if (DynSpr[restoreView.Frame]!=null) DynSpr[restoreView.Frame].Delete(); 
     }
     
     int frame=ClampFrame(this.Frame, this.Loop, this.View);
     
     
     ViewFrame*grabEgo=Game.GetViewFrame(this.View, this.Loop, frame);
     int restoredG=RestoreFrameGraphic(this.View, this.Loop, frame, address);
     int pID=GetNormalFromSprite(restoredG);
     DynSpr[frame] = DynamicSprite.CreateFromExistingSprite(restoredG, true);  
     
     int dx_w=this.x;//(IntToFloat(dx_w)-
     int dx=this.x-(DynSpr[frame].Width/2);//FloatToInt((IntToFloat(dx_w*this.Scaling)/100.0));

     int dy=this.y-DynSpr[frame].Height;//FloatToInt((IntToFloat(this.y)+(IntToFloat(this.y*this.Scaling)/100.0)));
     //dy+=DynSpr[this.Frame].Height;
     //dy-=FloatToInt((IntToFloat((DynSpr[this.Frame].Height/2)*this.Scaling)/100.0));//
     SetNormalMapXY(pID, dx, dy);  //-(DynSpr[this.Frame].Width/2) -DynSpr[this.Frame].Height
     UpdateNormalMap(DynSpr[frame].Graphic, pID);
     grabEgo.Graphic=DynSpr[frame].Graphic;
   }
}

